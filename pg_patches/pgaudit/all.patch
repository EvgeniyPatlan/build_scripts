--- ./pgaudit.c	2019-12-20 23:45:43.000000000 +0200
+++ ./pgaudit.c	2019-12-20 23:45:29.000000000 +0200
@@ -13,7 +13,6 @@
 #include "access/htup_details.h"
 #include "access/sysattr.h"
 #include "access/xact.h"
-#include "access/relation.h"
 #include "catalog/catalog.h"
 #include "catalog/objectaccess.h"
 #include "catalog/pg_class.h"
@@ -37,7 +36,20 @@
 #include "utils/rel.h"
 #include "utils/syscache.h"
 #include "utils/timestamp.h"
+#if PG_VERSION_NUM >= 100000
 #include "utils/varlena.h"
+#endif
+#if PG_VERSION_NUM >= 120000
+#include "access/relation.h"
+#endif
+
+#if (PG_VERSION_NUM >= 90500 && PG_VERSION_NUM < 90600)
+#define LOG_SERVER_ONLY COMMERROR
+#endif
+
+#if (PG_VERSION_NUM >= 90500 && PG_VERSION_NUM < 90600)
+#define LOG_SERVER_ONLY COMMERROR
+#endif
 
 PG_MODULE_MAGIC;
 
@@ -601,7 +613,9 @@
             {
                 /* READ statements */
                 case T_CopyStmt:
+#if PG_VERSION_NUM >= 100000
                 case T_DeclareCursorStmt:
+#endif
                 case T_SelectStmt:
                 case T_PrepareStmt:
                 case T_PlannedStmt:
@@ -1007,7 +1021,11 @@
         relOid = rte->relid;
         rel = relation_open(relOid, NoLock);
 
+#if PG_VERSION_NUM >= 120000
         if (!auditLogCatalog && IsCatalogNamespace(RelationGetNamespace(rel)))
+#else
+        if (!auditLogCatalog && IsSystemNamespace(RelationGetNamespace(rel)))
+#endif
         {
             relation_close(rel, NoLock);
             continue;
@@ -1219,7 +1237,11 @@
      * Logging execution of all pg_catalog functions would make the log
      * unusably noisy.
      */
+#if PG_VERSION_NUM >= 120000
     if (IsCatalogNamespace(proc->pronamespace))
+#else
+    if (IsSystemNamespace(proc->pronamespace))
+#endif
     {
         ReleaseSysCache(proctup);
         return;
@@ -1354,6 +1376,7 @@
 /*
  * Hook ProcessUtility to do session auditing for DDL and utility commands.
  */
+#if PG_VERSION_NUM >= 100000
 static void
 pgaudit_ProcessUtility_hook(PlannedStmt *pstmt,
                             const char *queryString,
@@ -1362,6 +1385,15 @@
                             QueryEnvironment *queryEnv,
                             DestReceiver *dest,
                             char *completionTag)
+#else
+static void
+pgaudit_ProcessUtility_hook(Node *parsetree,
+                             const char *queryString,
+                             ProcessUtilityContext context,
+                             ParamListInfo params,
+                             DestReceiver *dest,
+                             char *completionTag)
+#endif
 {
     AuditEventStackItem *stackItem = NULL;
     int64 stackId = 0;
@@ -1385,9 +1417,15 @@
             stackItem = stack_push();
 
         stackId = stackItem->stackId;
+#if PG_VERSION_NUM >= 100000
         stackItem->auditEvent.logStmtLevel = GetCommandLogLevel(pstmt->utilityStmt);
         stackItem->auditEvent.commandTag = nodeTag(pstmt->utilityStmt);
         stackItem->auditEvent.command = CreateCommandTag(pstmt->utilityStmt);
+#else
+        stackItem->auditEvent.logStmtLevel = GetCommandLogLevel(parsetree);
+        stackItem->auditEvent.commandTag = nodeTag(parsetree);
+        stackItem->auditEvent.command = CreateCommandTag(parsetree);
+#endif
         stackItem->auditEvent.commandText = queryString;
 
         /*
@@ -1401,12 +1439,21 @@
     }
 
     /* Call the standard process utility chain. */
+#if PG_VERSION_NUM >= 100000
     if (next_ProcessUtility_hook)
         (*next_ProcessUtility_hook) (pstmt, queryString, context, params,
                                      queryEnv, dest, completionTag);
     else
         standard_ProcessUtility(pstmt, queryString, context, params,
                                 queryEnv, dest, completionTag);
+#else
+    if (next_ProcessUtility_hook)
+        (*next_ProcessUtility_hook) (parsetree, queryString, context,
+                                     params, dest, completionTag);
+    else
+        standard_ProcessUtility(parsetree, queryString, context,
+                                params, dest, completionTag);
+#endif
 
     /*
      * Process the audit event if there is one.  Also check that this event
